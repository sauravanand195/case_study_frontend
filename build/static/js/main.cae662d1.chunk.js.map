{"version":3,"sources":["components/deleteConfirm/DeleteConfirm.js","components/submitModal/SubmitModal.js","components/Home_testv1.0.js","components/FallbackUI.js","components/error-boundary/ErrorBoundary.js","components/navbar/Navbar_test.js","components/searchPage/Pagination1.js","components/searchPage/Posts.js","components/searchPage/SearchParent.js","components/pageNotFound/PageNotFound.js","App.js","index.js"],"names":["DeleteConfirmation","props","indexo","delIndex","handleClose","setisShowDelete","Modal","show","onHide","Header","closeButton","Body","className","Footer","Button","variant","onClick","index","getDeleteDataIndex","SubmitModal","setisShowSubmitModal","handleShow","size","id","Home","useState","candidateName","department","clientName","technology","primaryInfo","setprimaryInfo","questions","setQuestions","question","answer","difficultyLevel","singleQuestion","setsingleQuestion","candidateNameError","setcandidateNameError","departmentError","setdepartmentError","clientNameError","setclientNameError","technologyError","settechnologyError","questionError","setquestionError","difficultyError","setdifficultyError","questionAtSubmitError","setquestionAtSubmitError","difficultyAtSubmitError","setdifficultyAtSubmitError","setdelIndex","isShowDelete","isShowSubmitModal","updatePrimaryData","event","target","name","value","validateCandidateName","validateDepartment","validateClientName","validateTechnology","validateQuestionAtSubmit","validateDifficultyAtSubmit","updateQuestionData","validateQuestion","validateDifficulty","Form","onSubmit","e","preventDefault","Container","Row","Col","md","FloatingLabel","controlId","label","Control","type","placeholder","onChange","Select","map","data","newquestionsCopy","updateQuestionOnTyping","updateDifficultyOnTyping","lg","as","style","height","updateAnswerOnTyping","sendDelIndex","color","backgroundColor","border","questionsCopy","push","updateToQuestionData","submitQuestionsCopy","console","log","serverData","updateToMergeState","DeleteConfirm","newquestionsData","splice","FallbackUI","marginTop","src","alt","ErrorBoundary","state","hasError","error","info","this","children","React","Component","withRouter","level","fromDate","toDate","search","searchData","setsearchData","updateSearchData","searchError","setsearchError","fromDateError","setfromDateError","toDateError","settoDateError","validateSearch","validateDate","Navbar","collapseOnSelect","expand","bg","fluid","Brand","to","Toggle","Collapse","Nav","InputGroup","FormControl","width","history","Pagination1","pages","setCurrentPage","numberOfPages","i","currentButton","setCurrentButton","arrOfCurrButtons","setArrOfCurrButtons","useEffect","tempNumberOfPages","dotsInitial","dotsLeft","dotsRight","length","sliced","slice","sliced1","sliced2","href","prev","item","Posts","posts","loading","Card","title","body","SearchParent","setPosts","setLoading","currentPage","postsPerPage","fetchPosts","a","axios","get","res","indexOfLastPost","indexOfFirstPost","currentPosts","howManyPages","Math","ceil","PageNotFound","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae662d1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n \r\nconst DeleteConfirmation = (props) => {\r\n  const indexo=props.delIndex;\r\n  const deleteFormData = (index) => {\r\n    props.getDeleteDataIndex(index) \r\n    handleClose()\r\n    };\r\n  \r\n  const handleClose = () => props.setisShowDelete(false);\r\n  const handleShow = () => props.setisShowDelete(true);\r\n    return (\r\n\r\n\r\n      <Modal show={handleShow} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        {/* <Modal.Title>Delete Confirmation</Modal.Title> */}\r\n      </Modal.Header>\r\n      <Modal.Body><div className=\"alert \"><h5>Are you sure, Once deleted cannot be undone ?</h5></div></Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary \" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={()=>{deleteFormData(indexo)}} > \r\n          Delete\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n\r\n\r\n      //   <Modal show={showModal} onHide={hideModal}>\r\n      //   <Modal.Header closeButton>\r\n      //     <Modal.Title>Delete Confirmation</Modal.Title>\r\n      //   </Modal.Header>\r\n      //   <Modal.Body><div className=\"alert alert-danger\">{message}</div></Modal.Body>\r\n      //   <Modal.Footer>\r\n      //     <Button variant=\"default\" onClick={hideModal}>\r\n      //       Cancel\r\n      //     </Button>\r\n      //     <Button variant=\"danger\" onClick={() => confirmModal(type, id) }>\r\n      //       Delete\r\n      //     </Button>\r\n      //   </Modal.Footer>\r\n      // </Modal>\r\n    )\r\n}\r\n \r\nexport default DeleteConfirmation;","import { Button, Modal } from 'react-bootstrap'\r\nimport './Modal.css';\r\nfunction SubmitModal(props) {\r\n  // const [smShow, setSmShow] = useState(false);\r\n\r\n  const handleClose = () => props.setisShowSubmitModal(false);\r\n  const handleShow = () => props.setisShowSubmitModal(true);\r\n\r\n  return (\r\n    <div >\r\n      {/* <Button onClick={() => setSmShow(true)}>Small modal</Button>{' '}  */}\r\n      <Modal show={handleShow} onHide={handleClose} className=\"modal__main\"\r\n        size=\"sm\"\r\n        show={handleShow}\r\n        onHide={handleClose}\r\n        aria-labelledby=\"example-modal-sizes-title-md\"\r\n      >\r\n\r\n        <Modal.Body id=\"example-modal-sizes-title-md\">\r\n          <div  >\r\n            <div id=\"container\">\r\n            {/* <div id=\"success\"><i className=\"fa-regular fa-circle-check\"></i></div> */}\r\n            <div id=\"success\"><i className=\"far fa-check-circle\"></i></div>\r\n            <p id=\"text\">Successfully Uploaded</p>\r\n            <div id=\"btn\"><Button onClick={ handleClose } id=\"button\">OK</Button></div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n\r\n      </Modal>\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\nexport default SubmitModal","import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Container,\r\n  FloatingLabel,\r\n  Form,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport \"./Home.css\";\r\nimport DeleteConfirmation from \"./deleteConfirm/DeleteConfirm\";\r\nimport SubmitModal from \"./submitModal/SubmitModal\";\r\nimport \"./Home_test.css\";\r\n\r\nfunction Home() {\r\n  const [primaryInfo, setprimaryInfo] = useState({\r\n    candidateName: \"\",\r\n    department: \"\",\r\n    clientName: \"\",\r\n    technology: \"\",\r\n  });\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const [singleQuestion, setsingleQuestion] = useState({\r\n    question: \"\",\r\n    answer: \"\",\r\n    difficultyLevel: \"\",\r\n  });\r\n\r\n  //error state\r\n  const [candidateNameError, setcandidateNameError] = useState(\"\");\r\n  const [departmentError, setdepartmentError] = useState(\"\");\r\n  const [clientNameError, setclientNameError] = useState(\"\");\r\n  const [technologyError, settechnologyError] = useState(\"\");\r\n  const [questionError, setquestionError] = useState(\"\");\r\n  const [difficultyError, setdifficultyError] = useState(\"\");\r\n\r\n  const [questionAtSubmitError, setquestionAtSubmitError] = useState(\"\");\r\n  const [difficultyAtSubmitError, setdifficultyAtSubmitError] = useState(\"\");\r\n\r\n  //delete modal\r\n  const [delIndex, setdelIndex] = useState();\r\n  const [isShowDelete, setisShowDelete] = useState(false);\r\n  const [isShowSubmitModal, setisShowSubmitModal] = useState(false);\r\n\r\n  //send del index to modal\r\n  const sendDelIndex = (index) => {\r\n    setdelIndex(index);\r\n  };\r\n\r\n  // update at submit\r\n  const updateToMergeState = () => {\r\n    validateCandidateName();\r\n    validateDepartment();\r\n    validateClientName();\r\n    validateTechnology();\r\n    validateQuestion();\r\n    validateDifficulty();\r\n\r\n    if (\r\n      validateCandidateName() &&\r\n      validateDepartment() &&\r\n      validateClientName() &&\r\n      validateTechnology() &&\r\n      validateQuestionAtSubmit() &&\r\n      validateDifficultyAtSubmit() &&\r\n      validateQuestion() &&\r\n      validateDifficulty()\r\n    ) {\r\n      ///////////////////////////////////////////////////////////////////////////////\r\n      //updating and merging main form data on submit\r\n\r\n      let submitQuestionsCopy = [...questions];\r\n      submitQuestionsCopy.push(singleQuestion);\r\n      setQuestions([...submitQuestionsCopy]);\r\n      console.log(\"submitQuestionsCopy\", submitQuestionsCopy);\r\n      ///////////////////////////////////////////////////////////////////////////////\r\n\r\n      const serverData = {\r\n        ...primaryInfo,\r\n        questions: submitQuestionsCopy,\r\n      };\r\n\r\n      setisShowSubmitModal(true);\r\n\r\n      //clearing all the fields\r\n\r\n      setprimaryInfo({\r\n        candidateName: \"\",\r\n        department: \"\",\r\n        clientName: \"\",\r\n        technology: \"\",\r\n      });\r\n\r\n      setQuestions([]);\r\n\r\n      setsingleQuestion({\r\n        question: \"\",\r\n        answer: \"\",\r\n        difficultyLevel: \"\",\r\n      });\r\n\r\n      console.log(\"SD\", serverData);\r\n    }\r\n  };\r\n\r\n  //delete question\r\n  const getDeleteDataIndex = (index) => {\r\n    const newquestionsData = [...questions];\r\n    newquestionsData.splice(index, 1);\r\n    setQuestions(newquestionsData);\r\n  };\r\n\r\n  //handle submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  // update primary data\r\n  const updatePrimaryData = (event) => {\r\n    setprimaryInfo({\r\n      ...primaryInfo,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  let validateCandidateName = () => {\r\n    if (primaryInfo.candidateName) {\r\n      setcandidateNameError(\"\");\r\n      return true;\r\n    } else {\r\n      setcandidateNameError(\"Please enter the name\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let validateDepartment = () => {\r\n    if (primaryInfo.department) {\r\n      setdepartmentError(\"\");\r\n      return true;\r\n    } else {\r\n      setdepartmentError(\"Select the department\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let validateClientName = () => {\r\n    if (primaryInfo.clientName) {\r\n      setclientNameError(\"\");\r\n      return true;\r\n    } else {\r\n      setclientNameError(\"Please enter the Client name\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let validateTechnology = () => {\r\n    if (primaryInfo.technology) {\r\n      settechnologyError(\"\");\r\n      return true;\r\n    } else {\r\n      settechnologyError(\"Select the technology\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  //validate question at submit\r\n\r\n  let validateQuestionAtSubmit = () => {\r\n    for (let index in questions) {\r\n      if (questions[index].question) {\r\n        setquestionAtSubmitError(\"\");\r\n        return true;\r\n      } else {\r\n        setquestionAtSubmitError(\"Enter the question\");\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  let validateDifficultyAtSubmit = () => {\r\n    for (let index in questions) {\r\n      if (questions[index].difficultyLevel) {\r\n        setdifficultyAtSubmitError(\"\");\r\n        return true;\r\n      } else {\r\n        setdifficultyAtSubmitError(\"Select the difficulty\");\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////\r\n  // update single questionData\r\n  const updateQuestionData = (event) => {\r\n    setsingleQuestion({\r\n      ...singleQuestion,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  let validateQuestion = () => {\r\n    if (singleQuestion.question) {\r\n      setquestionError(\"\");\r\n      return true;\r\n    } else {\r\n      setquestionError(\"Enter the question\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let validateDifficulty = () => {\r\n    if (singleQuestion.difficultyLevel) {\r\n      setdifficultyError(\"\");\r\n      return true;\r\n    } else {\r\n      setdifficultyError(\"Select the difficulty\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // update SinglequestionData to Questions array\r\n  const updateToQuestionData = () => {\r\n    validateCandidateName();\r\n    validateDepartment();\r\n    validateClientName();\r\n    validateTechnology();\r\n    validateQuestion();\r\n    validateDifficulty();\r\n    if (\r\n      validateCandidateName() &&\r\n      validateDepartment() &&\r\n      validateClientName() &&\r\n      validateTechnology() &&\r\n      validateQuestion() &&\r\n      validateDifficulty()\r\n    ) {\r\n      let questionsCopy = [...questions];\r\n      questionsCopy.push(singleQuestion);\r\n      setQuestions([...questionsCopy]);\r\n\r\n      setsingleQuestion({\r\n        question: \"\",\r\n        answer: \"\",\r\n        difficultyLevel: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  //update question on typing\r\n\r\n  const updateQuestionOnTyping = (event, index) => {\r\n    let newquestionsCopy = [...questions];\r\n    newquestionsCopy[index].question = event.target.value;\r\n    setQuestions(newquestionsCopy);\r\n  };\r\n\r\n  //update difficulty on typing\r\n  const updateDifficultyOnTyping = (event, index) => {\r\n    let newquestionsCopy = [...questions];\r\n    newquestionsCopy[index].difficultyLevel = event.target.value;\r\n    setQuestions(newquestionsCopy);\r\n  };\r\n\r\n  //update answer on typing\r\n  const updateAnswerOnTyping = (event, index) => {\r\n    let newquestionsCopy = [...questions];\r\n    newquestionsCopy[index].answer = event.target.value;\r\n    setQuestions(newquestionsCopy);\r\n  };\r\n  // console.log('questions',questions);\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Container>\r\n          <Row>\r\n            <Col md={12}>\r\n              <div id=\"header\">Upload Your Questions</div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"g-3\" /* id=\"tab-spc\" */>\r\n            <Col md={3}>\r\n              <FloatingLabel\r\n                controlId=\"floatingInputGrid\"\r\n                label=\"Candidate Name\"\r\n              >\r\n                <Form.Control\r\n                  type=\"Condidate Name\"\r\n                  placeholder=\"name@example.com\"\r\n                  name=\"candidateName\"\r\n                  onChange={(e) => {\r\n                    updatePrimaryData(e);\r\n                  }}\r\n                  value={primaryInfo.candidateName}\r\n                />\r\n                {candidateNameError && (\r\n                  <div className=\"error_for_home\">{candidateNameError}</div>\r\n                )}\r\n              </FloatingLabel>\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n              <FloatingLabel controlId=\"floatingInputGrid\" label=\"Department\">\r\n                <Form.Select\r\n                  aria-label=\"Floating label select example\"\r\n                  name=\"department\"\r\n                  onChange={(e) => {\r\n                    updatePrimaryData(e);\r\n                  }}\r\n                  value={primaryInfo.department}\r\n                >\r\n                  <option>Select.....</option>\r\n                  <option value=\"hr\">HR</option>\r\n                  <option value=\"it\">IT</option>\r\n                </Form.Select>\r\n                {departmentError && (\r\n                  <div className=\"error_for_home\">{departmentError}</div>\r\n                )}\r\n              </FloatingLabel>\r\n            </Col>\r\n            <Col md={3}>\r\n              <FloatingLabel controlId=\"floatingInputGrid\" label=\"Client Name\">\r\n                <Form.Control\r\n                  type=\"Client Name\"\r\n                  placeholder=\"name@example.com\"\r\n                  name=\"clientName\"\r\n                  onChange={(e) => {\r\n                    updatePrimaryData(e);\r\n                  }}\r\n                  value={primaryInfo.clientName}\r\n                />\r\n                {clientNameError && (\r\n                  <div className=\"error_for_home\">{clientNameError}</div>\r\n                )}\r\n              </FloatingLabel>\r\n            </Col>\r\n            <Col md={3}>\r\n              <FloatingLabel controlId=\"floatingInputGrid\" label=\"Technology\">\r\n                <Form.Select\r\n                  aria-label=\"Floating label select example\"\r\n                  name=\"technology\"\r\n                  onChange={(e) => {\r\n                    updatePrimaryData(e);\r\n                  }}\r\n                  value={primaryInfo.technology}\r\n                >\r\n                  <option>Select.....</option>\r\n                  <option value=\"reactjs\">ReactJs</option>\r\n                  <option value=\"vuejs\">VueJs</option>\r\n                  <option value=\"angular\">Angular</option>\r\n                  <option value=\"java\">Java</option>\r\n                </Form.Select>\r\n                {technologyError && (\r\n                  <div className=\"error_for_home\">{technologyError}</div>\r\n                )}\r\n              </FloatingLabel>\r\n            </Col>\r\n          </Row>\r\n\r\n          {/* display question data */}\r\n          <div>\r\n            {questions.map((data, index) => {\r\n              return (\r\n                <Row key={index} className=\"g-3\">\r\n                  <Col md={9}>\r\n                    <FloatingLabel\r\n                      controlId=\"floatingInputGrid\"\r\n                      label=\"Question\"\r\n                    >\r\n                      <Form.Control\r\n                        type=\"Question\"\r\n                        value={data.question}\r\n                        placeholder=\"name@example.com\"\r\n                        name=\"question\"\r\n                        onChange={(event) => {\r\n                          updateQuestionOnTyping(event, index);\r\n                        }}\r\n                      />\r\n                      {questionAtSubmitError && (\r\n                        <div className=\"error_for_home\">\r\n                          {questionAtSubmitError}\r\n                        </div>\r\n                      )}\r\n                    </FloatingLabel>\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <FloatingLabel\r\n                      controlId=\"floatingInputGrid\"\r\n                      label=\"Difficulty Level\"\r\n                    >\r\n                      <Form.Select\r\n                        aria-label=\"Floating label select example\"\r\n                        name=\"difficultyLevel\"\r\n                        onChange={(event) => {\r\n                          updateDifficultyOnTyping(event, index);\r\n                        }}\r\n                        value={data.difficultyLevel}\r\n                      >\r\n                        <option>Select.....</option>\r\n                        <option value=\"Easy\">Easy</option>\r\n                        <option value=\"Intermediate\">Intermediate</option>\r\n                        <option value=\"Expert\">Expert</option>\r\n                      </Form.Select>\r\n                      {difficultyAtSubmitError && (\r\n                        <div className=\"error_for_home\">\r\n                          {difficultyAtSubmitError}\r\n                        </div>\r\n                      )}\r\n                    </FloatingLabel>\r\n                  </Col>\r\n                  <Col lg={9}>\r\n                    <FloatingLabel controlId=\"floatingTextarea\" label=\"Answer\">\r\n                      <Form.Control\r\n                        value={data.answer}\r\n                        as=\"textarea\"\r\n                        placeholder=\"name@example.com\"\r\n                        style={{ height: \"100px\" }}\r\n                        onChange={(event) => {\r\n                          updateAnswerOnTyping(event, index);\r\n                        }}\r\n                      />\r\n                    </FloatingLabel>\r\n                  </Col>\r\n                  <Col md={3} className=\"addButton\">\r\n                    <Button\r\n                      onClick={() => {\r\n                        sendDelIndex(index);\r\n                        setisShowDelete(true);\r\n                      }}\r\n                      className=\"btnbtn float-end\"\r\n                      style={{\r\n                        color: \"white\",\r\n                        backgroundColor: \"#FAA81D\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      <i className=\"fas fa-trash\"></i>&nbsp;Delete\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              );\r\n            })}\r\n          </div>\r\n          {/* ============================================== */}\r\n\r\n          <Row className=\"g-3\">\r\n            <Col md={9}>\r\n              <FloatingLabel controlId=\"floatingInputGrid\" label=\"Question\">\r\n                <Form.Control\r\n                  type=\"Question\"\r\n                  placeholder=\"name@example.com\"\r\n                  name=\"question\"\r\n                  onChange={(event) => {\r\n                    updateQuestionData(event);\r\n                  }}\r\n                  value={singleQuestion.question}\r\n                />\r\n                {questionError && (\r\n                  <div className=\"error_for_home\">{questionError}</div>\r\n                )}\r\n              </FloatingLabel>\r\n            </Col>\r\n\r\n            <Col md={3}>\r\n              <FloatingLabel\r\n                controlId=\"floatingInputGrid\"\r\n                label=\"Defficulty Level\"\r\n              >\r\n                <Form.Select\r\n                  aria-label=\"Floating label select example\"\r\n                  name=\"difficultyLevel\"\r\n                  onChange={(event) => {\r\n                    updateQuestionData(event);\r\n                  }}\r\n                  value={singleQuestion.difficultyLevel}\r\n                >\r\n                  <option>Select.....</option>\r\n                  <option value=\"Easy\">Easy</option>\r\n                  <option value=\"Intermediate\">Intermediate</option>\r\n                  <option value=\"Expert\">Expert</option>\r\n                </Form.Select>\r\n                {difficultyError && (\r\n                  <div className=\"error_for_home\">{difficultyError}</div>\r\n                )}\r\n              </FloatingLabel>\r\n            </Col>\r\n            <Col lg={9}>\r\n              <FloatingLabel controlId=\"floatingTextarea\" label=\"Answer\">\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  placeholder=\"name@example.com\"\r\n                  style={{ height: \"100px\" }}\r\n                  name=\"answer\"\r\n                  onChange={(event) => {\r\n                    updateQuestionData(event);\r\n                  }}\r\n                  value={singleQuestion.answer}\r\n                />\r\n              </FloatingLabel>\r\n            </Col>\r\n\r\n            <Col md={3} className=\"addButton\">\r\n              <Button\r\n                onClick={() => {\r\n                  updateToQuestionData();\r\n                }}\r\n                className=\"btnbtn float-end\"\r\n                style={{\r\n                  color: \"white\",\r\n                  backgroundColor: \"#FAA81D\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <i className=\"fal fa-plus-circle\"></i>&nbsp;Add New\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"g-3\">\r\n            <Col md={12} className=\"submitButton\">\r\n              <Button\r\n                className=\"sub float-end \"\r\n                style={{\r\n                  color: \"white\",\r\n                  backgroundColor: \"#FAA81D\",\r\n                  border: \"none\",\r\n                }}\r\n                onClick={() => {\r\n                  updateToMergeState();\r\n                }}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Form>\r\n      {isShowDelete && (\r\n        <DeleteConfirmation\r\n          setisShowDelete={setisShowDelete}\r\n          delIndex={delIndex}\r\n          getDeleteDataIndex={getDeleteDataIndex}\r\n        />\r\n      )}\r\n      {isShowSubmitModal && (\r\n        <SubmitModal setisShowSubmitModal={setisShowSubmitModal} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import { Button, Col, Container, FloatingLabel, Form, Row, } from \"react-bootstrap\";\r\n// import \"./Home.css\";\r\n// import DeleteConfirmation from \"./deleteConfirm/DeleteConfirm\";\r\n// import SubmitModal from \"./submitModal/SubmitModal\";\r\n// import './Home_test.css'\r\n\r\n// function Home() {\r\n\r\n//   const [primaryInfo, setprimaryInfo] = useState({\r\n//     candidateName: \"\",\r\n//     department: \"\",\r\n//     clientName: \"\",\r\n//     technology: \"\",\r\n//   });\r\n\r\n//   const [questions, setQuestions] = useState([]);\r\n\r\n//   const [singleQuestion, setsingleQuestion] = useState({\r\n//     question: \"\",\r\n//     answer: \"\",\r\n//     difficultyLevel: \"\",\r\n//   });\r\n\r\n//   //error state\r\n//   const [candidateNameError, setcandidateNameError] = useState('');\r\n//   const [departmentError, setdepartmentError] = useState('');\r\n//   const [clientNameError, setclientNameError] = useState('');\r\n//   const [technologyError, settechnologyError] = useState('');\r\n//   const [questionError, setquestionError] = useState('');\r\n//   const [difficultyError, setdifficultyError] = useState('');\r\n\r\n//   const [questionAtSubmitError, setquestionAtSubmitError] = useState('');\r\n//   const [difficultyAtSubmitError, setdifficultyAtSubmitError] = useState('');\r\n\r\n//   //delete modal\r\n//   const [delIndex, setdelIndex] = useState()\r\n//   const [isShowDelete, setisShowDelete] = useState(false)\r\n//   const [isShowSubmitModal, setisShowSubmitModal] = useState(false)\r\n\r\n//   //send del index to modal\r\n//   const sendDelIndex = (index) => {\r\n//     setdelIndex(index)\r\n//   }\r\n\r\n//   /// update at submit\r\n//   const updateToMergeState = () => {\r\n//     validateCandidateName();\r\n//     validateDepartment();\r\n//     validateClientName();\r\n//     validateTechnology();\r\n//     validateQuestion()\r\n//     validateDifficulty()\r\n\r\n//     if (validateCandidateName() && validateDepartment() &&\r\n//       validateClientName() && validateTechnology() && validateQuestion() && validateDifficulty()) {\r\n\r\n//       ///////////////////////////////////////////////////////////////////////////////\r\n//       //updating and merging main form data on submit\r\n\r\n//       let submitQuestionsCopy = [...questions];\r\n//       submitQuestionsCopy.push(singleQuestion);\r\n//       setQuestions([...submitQuestionsCopy]);\r\n//       console.log('submitQuestionsCopy', submitQuestionsCopy);\r\n//       ///////////////////////////////////////////////////////////////////////////////\r\n\r\n//       const serverData = {\r\n//         ...primaryInfo,\r\n//         questions: submitQuestionsCopy,\r\n//       };\r\n\r\n//       setisShowSubmitModal(true)\r\n\r\n//       //clearing all the fields\r\n\r\n//       setprimaryInfo({\r\n//         candidateName: \"\",\r\n//         department: \"\",\r\n//         clientName: \"\",\r\n//         technology: \"\",\r\n//       })\r\n\r\n//       setQuestions([]);\r\n\r\n//       setsingleQuestion({\r\n//         question: \"\",\r\n//         answer: \"\",\r\n//         difficultyLevel: \"\",\r\n//       });\r\n\r\n//       console.log(\"SD\", serverData);\r\n//     }\r\n//   };\r\n\r\n//   //delete question\r\n//   const getDeleteDataIndex = (index) => {\r\n//     const newquestionsData = [...questions];\r\n//     newquestionsData.splice(index, 1);\r\n//     setQuestions(newquestionsData);\r\n//   };\r\n\r\n//   //handle submit\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//   };\r\n\r\n//   // update primary data\r\n//   const updatePrimaryData = (event) => {\r\n//     setprimaryInfo({\r\n//       ...primaryInfo,\r\n//       [event.target.name]: event.target.value,\r\n//     });\r\n//   };\r\n\r\n//   let validateCandidateName = () => {\r\n//     if (primaryInfo.candidateName) {\r\n//       setcandidateNameError('');\r\n//       return true;\r\n//     } else {\r\n//       setcandidateNameError('Please enter the name');\r\n//     }\r\n//     return false;\r\n//   }\r\n\r\n//   let validateDepartment = () => {\r\n//     if (primaryInfo.department) {\r\n//       setdepartmentError('');\r\n//       return true;\r\n//     } else {\r\n//       setdepartmentError('Select the department');\r\n//     }\r\n//     return false;\r\n//   }\r\n\r\n//   let validateClientName = () => {\r\n//     if (primaryInfo.clientName) {\r\n//       setclientNameError('');\r\n//       return true;\r\n//     } else {\r\n//       setclientNameError('Please enter the Client name');\r\n//     }\r\n//     return false;\r\n//   }\r\n\r\n//   let validateTechnology = () => {\r\n//     if (primaryInfo.technology) {\r\n//       settechnologyError('');\r\n//       return true;\r\n//     } else {\r\n//       settechnologyError('Select the technology');\r\n//     }\r\n//     return false;\r\n//   }\r\n\r\n//   ///validate question at submit\r\n\r\n//   // let validateQuestionAtSubmit = () => {\r\n//   //   for (let index in questions) {\r\n//   //     if (questions[index].question) {\r\n//   //       setquestionAtSubmitError('');\r\n//   //       return true;\r\n//   //     } else {\r\n//   //       setquestionAtSubmitError('Enter the question');\r\n//   //     }\r\n//   //     return false;\r\n//   //   }\r\n//   // }\r\n\r\n//   // let validateDifficultyAtSubmit = () => {\r\n//   //   for(let index in questions){\r\n//   //     if (questions[index].difficultyLevel) {\r\n//   //       setdifficultyAtSubmitError('');\r\n//   //       return true;\r\n//   //     } else {\r\n//   //       setdifficultyAtSubmitError('Select the difficulty');\r\n//   //     }\r\n//   //     return false;\r\n//   //   }\r\n//   // }\r\n\r\n//   /////////////////////////////////////\r\n//   // update single questionData\\\r\n//   const updateQuestionData = (event) => {\r\n//     setsingleQuestion({\r\n//       ...singleQuestion,\r\n//       [event.target.name]: event.target.value,\r\n//     });\r\n//   };\r\n\r\n//   let validateQuestion = () => {\r\n//     if (singleQuestion.question) {\r\n//       setquestionError('');\r\n//       return true;\r\n//     } else {\r\n//       setquestionError('Enter the question');\r\n//     }\r\n//     return false;\r\n//   }\r\n\r\n//   let validateDifficulty = () => {\r\n//     if (singleQuestion.difficultyLevel) {\r\n//       setdifficultyError('');\r\n//       return true;\r\n//     } else {\r\n//       setdifficultyError('Select the difficulty');\r\n//     }\r\n//     return false;\r\n//   }\r\n\r\n//   // update SinglequestionData to Questions array\r\n//   const updateToQuestionData = () => {\r\n//     validateCandidateName();\r\n//     validateDepartment();\r\n//     validateClientName();\r\n//     validateTechnology();\r\n//     validateQuestion();\r\n//     validateDifficulty();\r\n//     if (validateCandidateName() && validateDepartment() && validateClientName() && validateTechnology() && validateQuestion() && validateDifficulty()) {\r\n//       let questionsCopy = [...questions];\r\n//       questionsCopy.push(singleQuestion);\r\n//       setQuestions([...questionsCopy]);\r\n\r\n//       setsingleQuestion({\r\n//         question: \"\",\r\n//         answer: \"\",\r\n//         difficultyLevel: \"\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   //update question on typing\r\n\r\n//   const updateQuestionOnTyping = (event, index) => {\r\n//     let newquestionsCopy = [...questions];\r\n//     newquestionsCopy[index].question = event.target.value;\r\n//     setQuestions(newquestionsCopy);\r\n//   };\r\n\r\n//   //update difficulty on typing\r\n//   const updateDifficultyOnTyping = (event, index) => {\r\n//     let newquestionsCopy = [...questions];\r\n//     newquestionsCopy[index].difficultyLevel = event.target.value;\r\n//     setQuestions(newquestionsCopy);\r\n//   };\r\n\r\n//   //update answer on typing\r\n//   const updateAnswerOnTyping = (event, index) => {\r\n//     let newquestionsCopy = [...questions];\r\n//     newquestionsCopy[index].answer = event.target.value;\r\n//     setQuestions(newquestionsCopy);\r\n//   };\r\n//   // console.log('questions',questions);\r\n\r\n//   return (\r\n//     <div>\r\n//       <Form onSubmit={handleSubmit}>\r\n//         <Container>\r\n//           <Row>\r\n//             <Col md={12}>\r\n//               <div id=\"header\">Upload Your Questions</div>\r\n//             </Col>\r\n//           </Row>\r\n//           <Row className=\"g-3\" /* id=\"tab-spc\" */>\r\n//             <Col md={3}>\r\n//               <FloatingLabel\r\n//                 controlId=\"floatingInputGrid\"\r\n//                 label=\"Candidate Name\"\r\n//               >\r\n//                 <Form.Control\r\n//                   type=\"Condidate Name\"\r\n//                   placeholder=\"name@example.com\"\r\n//                   name=\"candidateName\"\r\n//                   onChange={(e) => {\r\n//                     updatePrimaryData(e);\r\n//                   }}\r\n//                   value={primaryInfo.candidateName}\r\n//                 />\r\n//                 {candidateNameError && <div className=\"error_for_home\">{candidateNameError}</div>}\r\n\r\n//               </FloatingLabel>\r\n//             </Col>\r\n\r\n//             <Col md={3}>\r\n//               <FloatingLabel controlId=\"floatingInputGrid\" label=\"Department\">\r\n//                 <Form.Select\r\n//                   aria-label=\"Floating label select example\"\r\n//                   name=\"department\"\r\n//                   onChange={(e) => {\r\n//                     updatePrimaryData(e);\r\n//                   }}\r\n//                   value={primaryInfo.department}\r\n//                 >\r\n//                   <option>Select.....</option>\r\n//                   <option value=\"hr\">HR</option>\r\n//                   <option value=\"it\">IT</option>\r\n//                 </Form.Select>\r\n//                 {departmentError && <div className=\"error_for_home\">{departmentError}</div>}\r\n//               </FloatingLabel>\r\n\r\n//             </Col>\r\n//             <Col md={3}>\r\n//               <FloatingLabel controlId=\"floatingInputGrid\" label=\"Client Name\">\r\n//                 <Form.Control\r\n//                   type=\"Client Name\"\r\n//                   placeholder=\"name@example.com\"\r\n//                   name=\"clientName\"\r\n//                   onChange={(e) => {\r\n//                     updatePrimaryData(e);\r\n//                   }}\r\n//                   value={primaryInfo.clientName}\r\n//                 />\r\n//                 {clientNameError && <div className=\"error_for_home\">{clientNameError}</div>}\r\n\r\n//               </FloatingLabel>\r\n//             </Col>\r\n//             <Col md={3}>\r\n//               <FloatingLabel controlId=\"floatingInputGrid\" label=\"Technology\">\r\n//                 <Form.Select\r\n//                   aria-label=\"Floating label select example\"\r\n//                   name=\"technology\"\r\n//                   onChange={(e) => {\r\n//                     updatePrimaryData(e);\r\n//                   }}\r\n//                   value={primaryInfo.technology}\r\n//                 >\r\n//                   <option>Select.....</option>\r\n//                   <option value=\"reactjs\">ReactJs</option>\r\n//                   <option value=\"vuejs\">VueJs</option>\r\n//                   <option value=\"angular\">Angular</option>\r\n//                   <option value=\"java\">Java</option>\r\n//                 </Form.Select>\r\n//                 {technologyError && <div className=\"error_for_home\">{technologyError}</div>}\r\n\r\n//               </FloatingLabel>\r\n//             </Col>\r\n//           </Row>\r\n\r\n//           {/* display question data */}\r\n//           <div>\r\n//             {questions.map((data, index) => {\r\n//               return (\r\n//                 <Row key={index} className=\"g-3\">\r\n//                   <Col md={9}>\r\n//                     <FloatingLabel\r\n//                       controlId=\"floatingInputGrid\"\r\n//                       label=\"Question\"\r\n//                     >\r\n//                       <Form.Control\r\n//                         type=\"Question\"\r\n//                         value={data.question}\r\n//                         placeholder=\"name@example.com\"\r\n//                         name=\"question\"\r\n//                         onChange={(event) => {\r\n//                           updateQuestionOnTyping(event, index);\r\n//                         }}\r\n//                       />\r\n//                       {questionAtSubmitError && <div className=\"error_for_home\">{questionAtSubmitError}</div>}\r\n\r\n//                     </FloatingLabel>\r\n//                   </Col>\r\n//                   <Col md={3}>\r\n//                     <FloatingLabel\r\n//                       controlId=\"floatingInputGrid\"\r\n//                       label=\"Difficulty Level\"\r\n//                     >\r\n//                       <Form.Select\r\n//                         aria-label=\"Floating label select example\"\r\n//                         name=\"difficultyLevel\"\r\n//                         onChange={(event) => {\r\n//                           updateDifficultyOnTyping(event, index);\r\n//                         }}\r\n//                         value={data.difficultyLevel}\r\n//                       >\r\n//                         <option>Select.....</option>\r\n//                         <option value=\"Easy\">Easy</option>\r\n//                         <option value=\"Intermediate\">Intermediate</option>\r\n//                         <option value=\"Expert\">Expert</option>\r\n//                       </Form.Select>\r\n//                       {difficultyAtSubmitError && <div className=\"error_for_home\">{difficultyAtSubmitError}</div>}\r\n//                     </FloatingLabel>\r\n//                   </Col>\r\n//                   <Col lg={9}>\r\n//                     <FloatingLabel controlId=\"floatingTextarea\" label=\"Answer\">\r\n//                       <Form.Control\r\n//                         value={data.answer}\r\n//                         as=\"textarea\"\r\n//                         placeholder=\"name@example.com\"\r\n//                         style={{ height: \"100px\" }}\r\n//                         onChange={(event) => {\r\n//                           updateAnswerOnTyping(event, index);\r\n//                         }}\r\n//                       />\r\n//                     </FloatingLabel>\r\n//                   </Col>\r\n//                   <Col md={3} className=\"addButton\">\r\n//                     <Button\r\n//                       onClick={() => {\r\n//                         sendDelIndex(index);\r\n//                         { setisShowDelete(true) }\r\n//                       }}\r\n//                       className=\"btnbtn float-end\"\r\n//                       style={{\r\n//                         color: \"white\",\r\n//                         backgroundColor: \"#FAA81D\",\r\n//                         border: \"none\",\r\n//                       }}\r\n//                     >\r\n//                       <i className=\"fas fa-trash\"></i>&nbsp;Delete\r\n//                     </Button>\r\n//                   </Col>\r\n//                 </Row>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//           {/* ============================================== */}\r\n\r\n//           <Row className=\"g-3\">\r\n//             <Col md={9}>\r\n//               <FloatingLabel controlId=\"floatingInputGrid\" label=\"Question\">\r\n//                 <Form.Control\r\n//                   type=\"Question\"\r\n//                   placeholder=\"name@example.com\"\r\n//                   name=\"question\"\r\n//                   onChange={(event) => {\r\n//                     updateQuestionData(event);\r\n//                   }}\r\n//                   value={singleQuestion.question}\r\n//                 />\r\n//                 {questionError && <div className=\"error_for_home\">{questionError}</div>}\r\n\r\n\r\n//               </FloatingLabel>\r\n//             </Col>\r\n\r\n//             <Col md={3}>\r\n//               <FloatingLabel\r\n//                 controlId=\"floatingInputGrid\"\r\n//                 label=\"Defficulty Level\"\r\n//               >\r\n//                 <Form.Select\r\n//                   aria-label=\"Floating label select example\"\r\n//                   name=\"difficultyLevel\"\r\n//                   onChange={(event) => {\r\n//                     updateQuestionData(event);\r\n//                   }}\r\n//                   value={singleQuestion.difficultyLevel}\r\n//                 >\r\n//                   <option>Select.....</option>\r\n//                   <option value=\"Easy\">Easy</option>\r\n//                   <option value=\"Intermediate\">Intermediate</option>\r\n//                   <option value=\"Expert\">Expert</option>\r\n//                 </Form.Select>\r\n//                 {difficultyError && <div className=\"error_for_home\">{difficultyError}</div>}\r\n\r\n\r\n//               </FloatingLabel>\r\n//             </Col>\r\n//             <Col lg={9}>\r\n//               <FloatingLabel controlId=\"floatingTextarea\" label=\"Answer\">\r\n//                 <Form.Control\r\n//                   as=\"textarea\"\r\n//                   placeholder=\"name@example.com\"\r\n//                   style={{ height: \"100px\" }}\r\n//                   name=\"answer\"\r\n//                   onChange={(event) => {\r\n//                     updateQuestionData(event);\r\n//                   }}\r\n//                   value={singleQuestion.answer}\r\n//                 />\r\n\r\n//               </FloatingLabel>\r\n//             </Col>\r\n\r\n//             <Col md={3} className=\"addButton\">\r\n//               <Button\r\n//                 onClick={() => {\r\n//                   updateToQuestionData();\r\n//                 }}\r\n//                 className=\"btnbtn float-end\"\r\n//                 style={{\r\n//                   color: \"white\",\r\n//                   backgroundColor: \"#FAA81D\",\r\n//                   border: \"none\",\r\n//                 }}\r\n//               >\r\n//                 <i className=\"fal fa-plus-circle\"></i>&nbsp;Add New\r\n//               </Button>\r\n//             </Col>\r\n//           </Row>\r\n\r\n//           <Row className=\"g-3\">\r\n//             <Col md={12} className=\"submitButton\">\r\n//               <Button\r\n//                 className=\"sub float-end \"\r\n//                 style={{\r\n//                   color: \"white\",\r\n//                   backgroundColor: \"#FAA81D\",\r\n//                   border: \"none\",\r\n//                 }}\r\n//                 onClick={() => {\r\n//                   updateToMergeState();\r\n//                 }}\r\n//               >\r\n//                 Submit\r\n//               </Button>\r\n//             </Col>\r\n//           </Row>\r\n//         </Container>\r\n//       </Form>\r\n//       {isShowDelete && <DeleteConfirmation setisShowDelete={setisShowDelete} delIndex={delIndex} getDeleteDataIndex={getDeleteDataIndex} />}\r\n//       {isShowSubmitModal && <SubmitModal setisShowSubmitModal={setisShowSubmitModal} />}\r\n//     </div>\r\n//   );\r\n// }\r\n// export default Home;","import React from \"react\";\r\n\r\n\r\nfunction FallbackUI() {\r\n  return (\r\n \r\n    <div className=\"fallBackUi\" style={{marginTop:\"20px\"}}>\r\n    <img src=\"assets/fallback.png\" alt=\"fallback\" />\r\n  </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default FallbackUI;\r\n","import React from 'react';\r\nimport FallbackUI from '../FallbackUI';\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = {\r\n           hasError: false };\r\n    \r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n\r\n      console.log('getDerivedStateFromError');\r\n      console.log('error',error);\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, info) {\r\n      // You can also log the error to an error reporting service\r\n    //   logErrorToMyService(error, info);\r\n    console.log('componentDidCatch executed');\r\n    console.log('err',error);\r\n    console.log('info',info);\r\n\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <FallbackUI/>\r\n      }else{\r\n\r\n        return this.props.children; \r\n      }\r\n    }\r\n  }\r\n\r\n  export default ErrorBoundary","import React, { useState } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport {\r\n  Nav,\r\n  Navbar,\r\n  Container,\r\n  Form,\r\n  Button,\r\n  Col,\r\n  Row,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport \"./navbar.css\";\r\n\r\nfunction NavbarTest(props) {\r\n  const [searchData, setsearchData] = useState({\r\n    technology: \"\",\r\n    level: \"\",\r\n    fromDate: \"\",\r\n    toDate: \"\",\r\n    search: \"\",\r\n  });\r\n\r\n  const updateSearchData = (event) => {\r\n    setsearchData({\r\n      ...searchData,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const [searchError, setsearchError] = useState(\"\");\r\n  const [fromDateError, setfromDateError] = useState(\"\");\r\n  const [toDateError, settoDateError] = useState(\"\");\r\n\r\n  let validateSearch = () => {\r\n    if (\r\n      searchData.search ||\r\n      searchData.technology ||\r\n      searchData.level ||\r\n      (searchData.fromDate && searchData.toDate)\r\n    ) {\r\n      setsearchError(\"\");\r\n      return true;\r\n    } else {\r\n      setsearchError(\"Enter some keywords\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let validateDate = () => {\r\n    if (\r\n      searchData.search ||\r\n      searchData.technology ||\r\n      searchData.level ||\r\n      (searchData.fromDate && searchData.toDate)\r\n    ) {\r\n      if (searchData.fromDate <= searchData.toDate) {\r\n        setfromDateError(\"\");\r\n        settoDateError(\"\");\r\n        return true;\r\n      } else {\r\n        setfromDateError(\"Enter date before to-date\");\r\n        settoDateError(\"Enter date after from-date\");\r\n      }\r\n      return false;\r\n    } else if (searchData.fromDate) {\r\n      setfromDateError(\"\");\r\n      settoDateError(\"Select to-date\");\r\n    } else {\r\n      settoDateError(\"\");\r\n      setfromDateError(\"Select from-date\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const sendData = (event) => {\r\n    validateSearch();\r\n    validateDate();\r\n    if (validateSearch() && validateDate()) {\r\n      console.log(\"searchData\", searchData);\r\n      setsearchError(\"\");\r\n      setfromDateError(\"\");\r\n      settoDateError(\"\");\r\n      props.history.push(\"/search\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar_main\">\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\r\n        <Container fluid>\r\n          <Navbar.Brand className=\"logo\">\r\n            <Link to=\"/\">\r\n              <img\r\n                src=\"assets/logo2.png\"\r\n                alt=\"\"\r\n                className=\"image\"\r\n                // height=\"48px\"\r\n                // width=\"175px\"\r\n              />\r\n            </Link>\r\n          </Navbar.Brand>\r\n\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <div>\r\n              <Nav className=\"me-auto\">\r\n                <Row className=\"g-3\">\r\n                  <Col md={1}></Col>\r\n                  <Col md={2}>\r\n                    <div className=\"tech\">\r\n                      <Form.Select\r\n                        aria-label=\"Default select example\"\r\n                        variant=\"\"\r\n                        id=\"dropdown-basic\"\r\n                        className=\"technol\"\r\n                        name=\"technology\"\r\n                        value={searchData.technology}\r\n                        onChange={updateSearchData}\r\n                      >\r\n                        <option>Technology</option>\r\n                        <option value=\"React Js\">ReactJs</option>\r\n                        <option value=\"Vue Js\">VueJs</option>\r\n                        <option value=\"Angular\">Angular</option>\r\n                        <option value=\"Java\">Java</option>\r\n                      </Form.Select>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md={2}>\r\n                    <div className=\"Linktech\">\r\n                      <Form.Select\r\n                        aria-label=\"Default select example\"\r\n                        variant=\"\"\r\n                        id=\"dropdown-basic\"\r\n                        className=\"linksize\"\r\n                        name=\"level\"\r\n                        value={searchData.level}\r\n                        onChange={updateSearchData}\r\n                      >\r\n                        <option>Level</option>\r\n                        <option value=\"Easy\">Easy</option>\r\n                        <option value=\"Intermediate\">Intermediate</option>\r\n                        <option value=\"Expert\">Expert</option>\r\n                      </Form.Select>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md={2}>\r\n                    <div className=\"formdate\">\r\n                      <Form.Control\r\n                        type=\"date\"\r\n                        name=\"fromDate\"\r\n                        placeholder=\"From Date\"\r\n                        // onFocus={(e) => (e.target.type = \"date\")}\r\n                        // onBlur={(e) => (e.target.type = \"text\")}\r\n                        value={searchData.fromDate}\r\n                        onChange={updateSearchData}\r\n                      />\r\n                    </div>\r\n                    {fromDateError && (\r\n                      <div className=\"errormsg\">{fromDateError}</div>\r\n                    )}\r\n                  </Col>\r\n                  <Col md={2}>\r\n                    <div className=\"todate\">\r\n                      <Form.Control\r\n                        type=\"date\"\r\n                        name=\"toDate\"\r\n                        placeholder=\"To Date\"\r\n                        // onFocus={(e) => (e.target.type = \"date\")}\r\n                        // onBlur={(e) => (e.target.type = \"text\")}\r\n                        value={searchData.toDate}\r\n                        onChange={updateSearchData}\r\n                      />\r\n                    </div>\r\n                    {toDateError && (\r\n                      <div className=\"errormsg\">{toDateError}</div>\r\n                    )}\r\n                  </Col>\r\n\r\n                  <Col md={2}>\r\n                    <div>\r\n                      <InputGroup>\r\n                        <FormControl\r\n                          type=\"text\"\r\n                          placeholder=\"Search Questions\"\r\n                          aria-label=\"Search\"\r\n                          className=\"search \"\r\n                          name=\"search\"\r\n                          value={searchData.search}\r\n                          onChange={updateSearchData}\r\n                        />\r\n                      </InputGroup>\r\n                      {searchError && (\r\n                        <div className=\"errormsg\">{searchError}</div>\r\n                      )}\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col md={1}>\r\n                    <div>\r\n                      <Button\r\n                        style={{ width: \"100%\" }}\r\n                        className=\"searchbutton\"\r\n                        onClick={sendData}\r\n                      >\r\n                        Search\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Nav>\r\n            </div>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(NavbarTest);\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { Link, withRouter } from \"react-router-dom\";\r\n// import {\r\n//   Nav,\r\n//   Navbar,\r\n//   Container,\r\n//   Form,\r\n//   Button,\r\n//   Col,\r\n//   Row,\r\n//   InputGroup,\r\n//   FormControl,\r\n// } from \"react-bootstrap\";\r\n// import \"./navbar.css\";\r\n\r\n// function NavbarTest(props) {\r\n//   //   const [searchError, setsearchError] = useState(\"\");\r\n//   const [searchData, setsearchData] = useState({\r\n//     technology: \"\",\r\n//     level: \"\",\r\n//     fromDate: \"\",\r\n//     toDate: \"\",\r\n//     search: \"\",\r\n//   });\r\n\r\n//   const updateSearchData = (event) => {\r\n//     setsearchData({\r\n//       ...searchData,\r\n//       [event.target.name]: event.target.value,\r\n//     });\r\n//   };\r\n\r\n//   const [searchError, setsearchError] = useState(\"\");\r\n//   const [fromDateError, setfromDateError] = useState(\"\");\r\n//   const [toDateError, settoDateError] = useState(\"\");\r\n\r\n//   let validateSearch = () => {\r\n//     if (\r\n//       searchData.search ||\r\n//       searchData.technology ||\r\n//       searchData.level ||\r\n//       searchData.fromDate ||\r\n//       searchData.toDate\r\n//     ) {\r\n//       setsearchError(\"\");\r\n//       return true;\r\n//     } else {\r\n//       setsearchError(\"Enter some keywords\");\r\n//     }\r\n//     return false;\r\n//   };\r\n\r\n//   let validateDate = () => {\r\n//     if (searchData.fromDate && searchData.toDate) {\r\n//       if (searchData.fromDate <= searchData.toDate) {\r\n//         setfromDateError(\"\");\r\n//         settoDateError(\"\");\r\n//         return true;\r\n//       } else {\r\n//         setfromDateError(\"From date should be less than to date\");\r\n//         settoDateError(\"To date should be more than from date\");\r\n//       }\r\n//       return false;\r\n//     }else{\r\n//         setfromDateError(\"Enter both dates\")\r\n//         settoDateError(\"Enter both dates\")\r\n//     }\r\n//     return false;\r\n//   };\r\n\r\n//   const sendData = (event) => {\r\n//     validateSearch();\r\n//     validateDate();\r\n//     if (validateSearch() && validateDate()) {\r\n//       console.log(\"searchData\", searchData);\r\n//       setsearchError(\"\");\r\n//       props.history.push(\"/search\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"navbar_main\">\r\n//       <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\r\n//         <Container fluid>\r\n//           <Navbar.Brand className=\"logo\">\r\n//             <Link to=\"/\">\r\n//               <img\r\n//                 src=\"assets/logo2.png\"\r\n//                 alt=\"\"\r\n//                 className=\"image\"\r\n//                 // height=\"48px\"\r\n//                 // width=\"200px\"\r\n//               />\r\n//             </Link>\r\n//           </Navbar.Brand>\r\n\r\n//           <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n//           <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n//             <div className=\"\" style={{}}>\r\n//               <Nav className=\"me-auto\">\r\n//                 <Row className=\"g-3\">\r\n//                   <Col md={1}></Col>\r\n//                   <Col md={2}>\r\n//                     <div className=\"tech\">\r\n//                       <Form.Select\r\n//                         aria-label=\"Default select example\"\r\n//                         variant=\"\"\r\n//                         id=\"dropdown-basic\"\r\n//                         className=\"technol\"\r\n//                         name=\"technology\"\r\n//                         value={searchData.technology}\r\n//                         onChange={updateSearchData}\r\n//                       >\r\n//                         <option>Technology</option>\r\n//                         <option value=\"React Js\">ReactJs</option>\r\n//                         <option value=\"Vue Js\">VueJs</option>\r\n//                         <option value=\"Angular\">Angular</option>\r\n//                         <option value=\"Java\">Java</option>\r\n//                       </Form.Select>\r\n//                     </div>\r\n//                   </Col>\r\n\r\n//                   <Col md={2}>\r\n//                     <div className=\"Linktech\">\r\n//                       <Form.Select\r\n//                         aria-label=\"Default select example\"\r\n//                         variant=\"\"\r\n//                         id=\"dropdown-basic\"\r\n//                         className=\"linksize\"\r\n//                         name=\"level\"\r\n//                         value={searchData.level}\r\n//                         onChange={updateSearchData}\r\n//                       >\r\n//                         <option>Level</option>\r\n//                         <option value=\"Easy\">Easy</option>\r\n//                         <option value=\"Intermediate\">Intermediate</option>\r\n//                         <option value=\"Expert\">Expert</option>\r\n//                       </Form.Select>\r\n//                     </div>\r\n//                   </Col>\r\n\r\n//                   <Col md={2}>\r\n//                     <div className=\"formdate\">\r\n//                       <Form.Control\r\n//                         type=\"date\"\r\n//                         // name=\"date-of-birth\"\r\n//                         name=\"fromDate\"\r\n//                         placeholder=\"From Date\"\r\n//                         // onFocus={(e) => (e.target.type = \"date\")}\r\n//                         // onBlur={(e) => (e.target.type = \"text\")}\r\n//                         value={searchData.fromDate}\r\n//                         onChange={updateSearchData}\r\n//                       />\r\n//                     </div>\r\n//                     {fromDateError && (\r\n//                       <div className=\"errormsg\">{fromDateError}</div>\r\n//                     )}\r\n//                   </Col>\r\n//                   <Col md={2}>\r\n//                     <div className=\"todate\">\r\n//                       <Form.Control\r\n//                         type=\"date\"\r\n//                         // name=\"date-of-birth\"\r\n//                         name=\"toDate\"\r\n//                         placeholder=\"To Date\"\r\n//                         // onFocus={(e) => (e.target.type = \"date\")}\r\n//                         // onBlur={(e) => (e.target.type = \"text\")}\r\n//                         value={searchData.toDate}\r\n//                         onChange={updateSearchData}\r\n//                       />\r\n//                     </div>\r\n//                     {toDateError && (\r\n//                       <div className=\"errormsg\">{toDateError}</div>\r\n//                     )}\r\n//                   </Col>\r\n\r\n//                   <Col md={2}>\r\n//                     <div>\r\n//                       <InputGroup>\r\n//                         <FormControl\r\n//                           type=\"text\"\r\n//                           placeholder=\"Search Questions\"\r\n//                           aria-label=\"Search\"\r\n//                           className=\"search \"\r\n//                           name=\"search\"\r\n//                           value={searchData.search}\r\n//                           onChange={updateSearchData}\r\n//                         />\r\n//                       </InputGroup>\r\n//                       {searchError && (\r\n//                         <div className=\"errormsg\">{searchError}</div>\r\n//                       )}\r\n//                     </div>\r\n//                   </Col>\r\n\r\n//                   <Col md={1}>\r\n//                     <div>\r\n//                       <Button\r\n//                         style={{ width: \"100%\" }}\r\n//                         className=\"searchbutton\"\r\n//                         onClick={sendData}\r\n//                       >\r\n//                         Search\r\n//                       </Button>\r\n//                     </div>\r\n//                   </Col>\r\n//                 </Row>\r\n//               </Nav>\r\n//             </div>\r\n//           </Navbar.Collapse>\r\n//         </Container>\r\n//       </Navbar>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default withRouter(NavbarTest);","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./Pagination1.css\";\r\n\r\nfunction Pagination1({ pages, setCurrentPage }) {\r\n  //Set number of pages\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const numberOfPages = [];\r\n  for (let i = 1; i <= pages; i++) {\r\n    numberOfPages.push(i);\r\n  }\r\n\r\n  // Current active button number\r\n  const [currentButton, setCurrentButton] = useState(1);\r\n\r\n  // Array of buttons what we see on the page\r\n  const [arrOfCurrButtons, setArrOfCurrButtons] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let tempNumberOfPages = [...arrOfCurrButtons];\r\n\r\n    let dotsInitial = \"...\";\r\n    let dotsLeft = \"... \";\r\n    let dotsRight = \" ...\";\r\n\r\n    if (numberOfPages.length < 6) {\r\n      tempNumberOfPages = numberOfPages;\r\n    } else if (currentButton >= 1 && currentButton <= 3) {\r\n      tempNumberOfPages = [1, 2, 3, 4, dotsInitial, numberOfPages.length];\r\n    } else if (currentButton === 4) {\r\n      const sliced = numberOfPages.slice(0, 5);\r\n      tempNumberOfPages = [...sliced, dotsInitial, numberOfPages.length];\r\n    } else if (currentButton > 4 && currentButton < numberOfPages.length - 2) {\r\n      const sliced1 = numberOfPages.slice(currentButton - 2, currentButton);\r\n      const sliced2 = numberOfPages.slice(currentButton, currentButton + 1);\r\n      tempNumberOfPages = [\r\n        1,\r\n        dotsLeft,\r\n        ...sliced1,\r\n        ...sliced2,\r\n        dotsRight,\r\n        numberOfPages.length,\r\n      ];\r\n    } else if (currentButton > numberOfPages.length - 3) {\r\n      const sliced = numberOfPages.slice(numberOfPages.length - 4);\r\n      tempNumberOfPages = [1, dotsLeft, ...sliced];\r\n    } else if (currentButton === dotsInitial) {\r\n      setCurrentButton(arrOfCurrButtons[arrOfCurrButtons.length - 3] + 1);\r\n    } else if (currentButton === dotsRight) {\r\n      setCurrentButton(arrOfCurrButtons[3] + 2);\r\n    } else if (currentButton === dotsLeft) {\r\n      setCurrentButton(arrOfCurrButtons[3] - 2);\r\n    }\r\n\r\n    setArrOfCurrButtons(tempNumberOfPages);\r\n    setCurrentPage(currentButton);\r\n  }, [ currentButton]);\r\n\r\n  return (\r\n    <div className=\"footer\" >\r\n      <div className=\"pagination-container\">\r\n        <a id=\"button\"\r\n          href=\"#\"\r\n          className={`${currentButton === 1 ? \"disabled\" : \"\"}`}\r\n          onClick={() =>\r\n            setCurrentButton((prev) => (prev <= 1 ? prev : prev - 1))\r\n          }\r\n        >\r\n          Prev\r\n        </a>\r\n\r\n        {arrOfCurrButtons.map((item, index) => {\r\n          return (\r\n            <a\r\n              href=\"#\"\r\n              key={index}\r\n              className={`${currentButton === item ? \"active\" : \"\"}`}\r\n              onClick={() => setCurrentButton(item)}\r\n            >\r\n              {item}\r\n            </a>\r\n          );\r\n        })}\r\n\r\n        <a id=\"button\"\r\n          href=\"#\"\r\n          className={`${\r\n            currentButton === numberOfPages.length ? \"disabled\" : \"\"\r\n          }`}\r\n          onClick={() =>\r\n            setCurrentButton((prev) =>\r\n              prev >= numberOfPages.length ? prev : prev + 1\r\n            )\r\n          }\r\n        >\r\n          Next\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination1;\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\n// import './Search__page.css'\r\nimport './Posts.css'\r\n\r\nconst Posts = ({ posts, loading }) => {\r\n    if (loading) {\r\n        return <h2>Loading......</h2>\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                posts.map((posts,index) => (<Card key={index}>\r\n                    <Card.Body>\r\n                        <div>\r\n                            <dl className=\"box\">\r\n                                <dd className=\"ques\" key={posts.id}>\r\n                                    {posts.id}.&nbsp;&nbsp;\r\n                                    {posts.title}</dd>\r\n                                <dd className=\"ans\"> {posts.body} {posts.body}{posts.body}</dd>\r\n                                \r\n                            </dl>\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n\r\n                ))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Posts\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Pagination1 from \"./Pagination1\";\r\nimport axios from \"axios\";\r\nimport Posts from \"./Posts\";\r\n\r\nfunction SearchParent() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      setLoading(true);\r\n      const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\r\n      setPosts(res.data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  if (loading && posts.length === 0) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  //Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n  const howManyPages = Math.ceil(posts.length / postsPerPage);\r\n\r\n  return (\r\n    <div>\r\n      <Posts posts={currentPosts} />\r\n      <Pagination1 pages={howManyPages} setCurrentPage={setCurrentPage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchParent;\r\n","import React from 'react'\r\nimport \"./PageNotFound.css\"\r\n\r\nconst PageNotFound = () => {\r\n    return (\r\n        <div id=\"wrapper\">\r\n            <img className=\"notfound\" height=\"500px\" src=\"assets/404.png\" alt=\"\" />\r\n            <div id=\"info\">\r\n                <h3 className=\"text\">This page could not be found</h3>\r\n             </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default PageNotFound","import Home from \"./components/Home_testv1.0\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ErrorBoundary from \"./components/error-boundary/ErrorBoundary\";\nimport NavbarTest from \"./components/navbar/Navbar_test\";\nimport SearchParent from \"./components/searchPage/SearchParent\";\nimport PageNotFound from './components/pageNotFound/PageNotFound';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <ErrorBoundary>\n        <NavbarTest />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          <Route exact path=\"/search\">\n            <SearchParent />\n          </Route>\n\n          <Route path=\"*\" component={PageNotFound} />\n        </Switch>\n        </ErrorBoundary>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}